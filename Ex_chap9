The exercise in the 9th chapter focuses on one of the most powerful tools in the Python language, the datatype list, and the first assignment is a simple exercise to create. Define a list which has four items, strings "Blue","Red","Yellow" and "Green". After this, make a slice from the list which contains only the first item of the list (list place 0), and print out all of the items with one for-structure. When the code works properly, the program prints the following:




			
>>> 
The first item in the list is: Blue
The entire list printed one item a time:
Blue
Red
Yellow
Green
>>> 

solution:
mylist = ["Blue","Red","Yellow", "Green"]
for i in [0]:
	print("The first item in the list is: ", mylist[i])
print("The entire list printed one item a time:")
for i in mylist:
    print(i)
    
    
In the second exercise the idea is to create a small grocery shopping list with the list datastructure. In short, create a program that allows the user to (1) add products to the list, (2) remove items and (3) print the list and quit.

If the user adds something to the list, the program asks "What will be added?: " and saves it as the last item in the list. If the user decides to remove something, the program informs the user about how many items there are on the list (There are [number] items in the list.") and prompts the user for the removed item ("Which item is deleted?: "). If the user selects 0, the first item is removed. When the user quits, the final list is printed for the user "The following items remain in the list:" followed by the remaining items one per line. If the user selects anything outside the options, including when deleting items, the program responds "Incorrect selection.". When the program works correctly it prints out the following:




		
>>> 
Would you like to
(1)Add or
(2)Remove items or
(3)Quit?: 1
What will be added?: Apples
Would you like to
(1)Add or
(2)Remove items or
(3)Quit?: 1
What will be added?: Beer
Would you like to
(1)Add or
(2)Remove items or
(3)Quit?: 1
What will be added?: Carrots
Would you like to
(1)Add or
(2)Remove items or
(3)Quit?: 2
There are 3 items in the list.
Which item is deleted?: 3
Incorrect selection.
Would you like to
(1)Add or
(2)Remove items or
(3)Quit?: 2
There are 3 items in the list.
Which item is deleted?: 2
Would you like to
(1)Add or
(2)Remove items or
(3)Quit?: 2
There are 2 items in the list.
Which item is deleted?: 0
Would you like to
(1)Add or
(2)Remove items or
(3)Quit?: 4
Incorrect selection.
Would you like to
(1)Add or
(2)Remove items or
(3)Quit?: 3
The following items remain in the list:
Beer
>>>  

solution:
shopping_list = []

def addItem():
    item = input("What will be added?: ")
    shopping_list.append(item)

def delete():
	print("There are", len(shopping_list), "items in the list.")
	num = int(input("Which item is deleted?: "))
	if num < len(shopping_list):
		shopping_list.pop(num)
	else:
		print("Incorrect selection.")

def main():
	while True:
		print("Would you like to")
		print("(1)Add or")
		print("(2)Remove items or")
		selection=input("(3)Quit?: ")
		if selection=='1':
			addItem()
		elif selection=='2':
			delete()
		elif selection=='3':
			print("The following items remain in the list: ")
			for i in shopping_list:
				print(i)
			break
		else:
			print("Incorrect selection.")
			
main()


The third exercise also revolves around list methods, this time doing data manipulation. In the same folder as the source code, there is a file named "words.txt", which has a randomly selected set of words. Build a program, which reads all of the words from the file, sorts them in alphabetic order and prints out the list with the statement "Words in an alphabetical order:". When correctly implemented, the program prints out the following:



		
>>> 
Words in an alphabetical order:
aardvark
beercase
buzz
hammer
house
lion
nail
roadworks
salesman
shovel
table
xenon
>>> 


All the words in the file are written in lowercase letters, and do not have any special characters or numbers.

solution:
words = list()

FileName = "words.txt"
with open (FileName) as fin:
	for line in fin:
		words.append(line)
		
words.sort()
print("Words in an alphabetical order:")
for i in words:
	print(i)
  
  
	

As this is the last exercise for procedural programming, this exercise is also a sort of final project, which implements all of the things discussed during the course. Also, even this if this exercise is marked as an exercise for the continuing notebook program, the changes made in the program will be rather excessive, so it may be a good idea to start from a clean plate.

In this exercise the idea is to build a notebook which applies the Python data structure list as a note manipulation method when the program is executed, and saves the data in a bitwise mode with pickle. The program has the following features:
A) It is possible to add notes, with similar timestamps as earlier.
B)It is possible to edit a note by selecting it from the list, and rewriting it with new data.
C) It is possible to delete notes separately based on the selection and
D) Notebook loads an existing notebook file from the file "notebook.dat" if such a file exists.

When the program starts, the system should check for a notebook datafile "notebook.dat" and load it with pickle. If no such file exists, or there was a problem with the file, a new file is created and the user is notified "No default notebook was found, created one.". After this the basic main menu works as in the earlier notebook:



	
>>> 
No default notebook was found, created one.
(1) Read the notebook
(2) Add note
(3) Edit a note
(4) Delete a note
(5) Save and quit

Please select one: 2
Write a new note: Buy birdseed.
(1) Read the notebook
(2) Add note
(3) Edit a note
(4) Delete a note
(5) Save and quit

Please select one: 1
Buy birdseed.:::16:41:40 04/25/11


If the user is not pleased with a note, it is possible to change one note with the option 3. Then the program asks for the edited note (0 is the first one on the list) with the prompt "The list has [number] notes.\nWhich of them will be changed?:". After giving an input, the user is then printed the selected note and asked for a new note "Give the new note:". This new note replaces the old note on the list:



	
(1) Read the notebook
(2) Add note
(3) Edit a note
(4) Delete a note
(5) Save and quit

Please select one: 3
The list has 1 notes.
Which of them will be changed?: 0
Buy birdseed.:::16:41:40 04/25/11
Give the new note: Buy pig food.
(1) Read the notebook
(2) Add note
(3) Edit a note
(4) Delete a note
(5) Save and quit

Please select one: 1
Buy pig food.:::16:42:03 04/25/11





Deleting a note is done similarly as editing. The only real difference is that the deleted note is printed to the user with the notification "Deleted note [deleted note]".



	
(1) Read the notebook
(2) Add note
(3) Edit a note
(4) Delete a note
(5) Save and quit

Please select one: 4
The list has 1 notes.
Which of them will be deleted?: 0
Deleted note Buy pig food.:::16:42:03 04/25/11


Finally, when the user decides to quit, the current notebook is saved as a datagram to the file "notebook.dat", with the notification "Notebook shutting down, thank you.".



	
(1) Read the notebook
(2) Add note
(3) Edit a note
(4) Delete a note
(5) Save and quit

Please select one: 5
Notebook shutting down, thank you.


Also, if there already is a notebook datagram file, it should be loaded at startup, and otherwise normally used in the notebook program:



	
>>> 

(1) Read the notebook
(2) Add note
(3) Edit a note
(4) Delete a note
(5) Save and quit

Please select one: 1
Buy gas:::16:45:51 04/25/11
(1) Read the notebook
(2) Add note
(3) Edit a note
(4) Delete a note
(5) Save and quit

Please select one: 4
The list has 1 notes.
Which of them will be deleted?: 0
Deleted note Buy gas:::16:45:51 04/25/11
(1) Read the notebook
(2) Add note
(3) Edit a note
(4) Delete a note
(5) Save and quit

Please select one: 2
Write a new note: Call tow truck
(1) Read the notebook
(2) Add note
(3) Edit a note
(4) Delete a note
(5) Save and quit

Please select one: 5
Notebook shutting down, thank you.
>>> 


This program is probably the most difficult exercise in this course, but it is possible to implement it with roughly 50 to 60 lines of code when applying the things taught during this course. When you get this program to work, it is time to congratulate yourself, as that means that you have been able to use most, if not all, of the main topics from this course efficiently!

solution:
import time  
import pickle 

try:  
	filename = open("notebook.dat","rb")  
	notebook = pickle.load(filename)
except IOError:
	filename = open("notebook.dat","wb")
	print("No default notebook was found, created one.")
	notebook = []
		
while True: 
	print("(1) Read the notebook \n(2) Add note \n (3) Edit a note \n (4) Delete a note \n (5) Save and quit \n")
	print("")
	
	selection = int(input("Please select one: ")) 
	if selection == 1:  
		for i in notebook:   
			print(i)    
	elif selection == 2:   
		newnote = input("Write a new note: ")   
		now = time.strftime("%X %x")
		addnote = newnote + ":::" + now
		notebook.append(addnote)
	elif selection == 3:
		change = int(input("The list has " + str(len(notebook)) + " notes.\n Which of them will be changed?: "))   
		print(notebook[change-1])
		notebook.pop(change-1)
		newnote = input("Give the new note: ")   
		now = time.strftime("%X %x")
		addnote = newnote + ":::" + now
		notebook.insert(change-1,addnote)
	elif selection == 4:      
		delete = int(input("The list has " + str(len(notebook)) + " notes.\nWhich of them will be deleted?: "))   
		print("Deleted note " + notebook[delete-1])
		notebook.pop(delete-1)
	elif selection == 5:  
		pickle.dump(notebook,filename)   
		print("Notebook shutting down, thank you.")
		break
