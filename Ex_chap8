The first exercise in this chapter discusses the most common problem with programs in Python: getting a numeric value as input without a problem or constant fear of TypeError. Simply put, create a program, which asks the user for input and tries to convert it to an integer value. If the conversion happens without problems, the program prints "The input was suitable!". If the user gives something which does not convert, like letters or special characters, the program avoids the error with an exception handler and prints "The input was malformed.". When working correctly, the program prints out the following:



			
Give a number: Monkeys?
The input was malformed.

or alternatively



			
Give a number: 234
The input was suitable!


Probably the best way of implementing this exercise is to use the generic error class Exception, as there are some special cases where the interpreter actually raises something else than TypeError, like ValueError or NameError. Also keep in mind, that there can be an else-segement in the exception handler.

solution:
mynumber = input("Give a number: ")

try:
	mynumber = int(mynumber)
	print("The input was suitable!")
	
except Exception:
	print("The input was malformed.")
  
  
The second exercise combines several normal error scenarios into one program. In this exercise, create a program which prompts the user for a file name. Based on user input, open the given file and read the contents into one big string. Then convert this string to an integer and divides the number 1000 with the number. Finally, print out the result from the division.

The idea here is that no matter what the user input is, the program works. If the file cannot be found, the program prints "There seems to be no file with that name.", if the conversion fails, "The file contents are unsuitable.", in other errors "There was a problem with the program." or if everything went correctly, "The result was [result].". In any case (besides KeyboardInterruption with Ctrl-C), the program should be impossible to break with user input. If everything works as intended, it prints the following:




			
>>> 
Give the file name: hahaha...NO
There seems to be no file with that name.
>>> 
Give the file name: notebook.txt
The file contents were unsuitable.
>>> 

Give the file name: number.txt
The result was 3.194888178913738
>>> 

solution:
def getfilename():
      filename = input("Give the file name: ")
      return filename

def main():
      returned=getfilename()

      try:
          handle = open(returned,"r")
          filetext = handle.read()
          result=1000/float(filetext)
      except IOError:
          print ("There seems to be no file with that name.")
      except (TypeError, ValueError):
          print ("The file contents were unsuitable.")
      else:
          print ("The result was",result)
if __name__ == "__main__":
     main()
     
     
The third exercise in the chapter continues with the calculator exercises done earlier. This time the idea is to finally take out the annoying problems with numbers, input validity and the stability problems caused by type conversion funvtion.

Make the following changes to the calculator: Every time the user gives numbers to the program, the system asks for the numbers with the prompt "Give a number: " and continues until a valid number is given. If the number is not correct, the system gives an error message "This input is invalid.". If the calculator works correctly, it prints out the following:



		
>>> 
Calculator
Give a number: hah, NEVER
This input is invalid.
Give a number: What?
This input is invalid.
Give a number: 100
Give a number: Just kidding
This input is invalid.
Give a number: 50
(1) +
(2) -
(3) *
(4) /
(5)sin(number1/number2)
(6)cos(number1/number2)
(7)Change numbers
(8)Quit
Current numbers: 100 50
Please select something (1-6): 2
The result is: 50
(1) +
(2) -
(3) *
(4) /
(5)sin(number1/number2)
(6)cos(number1/number2)
(7)Change numbers
(8)Quit
Current numbers: 100 50
Please select something (1-6): 8
Thank you!
>>> 


The easiest way of implementing this feature is probably to define a separate function to call when asking numbers. In this function, an iteration keeps asking a number as long as the user decides to joke around. If the input is valid, iteration terminates with break and the function returns an acceptable value.

solution:
import math

def inputNumber():
	while True:
		try:
			num = int(input("Give a number: "))
			return num
		except Exception:
			print("This input is invalid.")

def main():
	print("Calculator")
	num1 = inputNumber()
	num2 = inputNumber()

	while True:
		print("(1) +\n(2) -\n(3) *\n(4) /\n(5)sin(number1/number2)\n(6)cos(number1/number2)\n(7)Change numbers\n(8)Quit")
		print("Current numbers:",num1,num2)
		selection = int(input("Please select something (1-6): "))

		if selection == 1:
			print("The result is:",num1 + num2)
		elif selection == 2:
			print("The result is:",num1 - num2)
		elif selection == 3:
			print("The result is:",num1 * num2)
		elif selection == 4:
			print("The result is:",num1 / num2)
		elif selection == 5:
			print("The result is:",math.sin(num1 / num2))
		elif selection == 6:
			print("The result is:",math.cos(num1 / num2))
		elif selection == 7:
			num1 = int(input("Give the first number: "))
			num2 = int(input("Give the second number: "))
		elif selection == 8:
			print("Thank you!")
			break
		else:
			print("Selection was not correct.")

if __name__ == "__main__":
	main()
  
  
Also the other continuous project, the notebook, has relied on user actions in the sense that it would have broken down if the user had decided to read the file without writing anything to it. In this exercise we fix this, and add the possiblity of changing the used notebook file while the program is running.

First of all, make the program start by checking if there is a file "notebook.txt" and create one if there is none. If this has to be done, also inform the user with the warning "No default notebook was found, created one.".

When this feature works, add a fourth selection to the notebook, "(4) Change the notebook". If the user selects this option, the user is prompted for a new file "Give the name of the new file: ". If there is an existing file, it is opened and loaded into the notebook program, while the old notebook file is closed. If the new notebook file does not exist, the system informs the user "No notebook with that name detected, created one." and makes a new file. Also add a note of the used notebook file to the main menu, "Now using file [filename]". If everything is implemented correctly, the program works as follows:



		
>>> 
No default notebook was found, created one.
Now using file notebook.txt
(1) Read the notebook
(2) Add note
(3) Empty the notebook
(4) Change the notebook
(5) Quit

Please select one: 2
Write a new note: Buy milk.
Now using file notebook.txt
(1) Read the notebook
(2) Add note
(3) Empty the notebook
(4) Change the notebook
(5) Quit

Please select one: 4
Give the name of the new file: otherbook.txt
No notebook with that name detected, created one.
Now using file otherbook.txt
(1) Read the notebook
(2) Add note
(3) Empty the notebook
(4) Change the notebook
(5) Quit

Please select one: 2
Write a new note: Buy pineapples.
Now using file otherbook.txt
(1) Read the notebook
(2) Add note
(3) Empty the notebook
(4) Change the notebook
(5) Quit

Please select one: 4
Give the name of the new file: notebook.txt
Now using file notebook.txt
(1) Read the notebook
(2) Add note
(3) Empty the notebook
(4) Change the notebook
(5) Quit

Please select one: 1
Buy milk.:::12:05:23 04/25/11

Now using file notebook.txt
(1) Read the notebook
(2) Add note
(3) Empty the notebook
(4) Change the notebook
(5) Quit

Please select one: 5
Notebook shutting down, thank you.
>>> 


The best way to approach the required changes in this exercise is to first rewrite the code so that it stores the name of the used notebook file in a variable, and that this variable is changed as needed. Also, the easiest way of testing if a file exists is to open it to a file handle inside exception handler. If an IOError was generated, then there was no file with that name and write mode can be used to create such file.

solution:
import time

nowopen = "notebook.txt"
try:
    notebook=open(nowopen)
except IOError:
	notebook = open(nowopen, "w")
	print("No default notebook was found, created one.")

notebook.close()

while True:
	print("")
	print("Now using file " + nowopen)
	print("(1) Read the notebook\n(2) Add note\n(3) Empty the notebook\n(4) Change the notebook\n(5) Quit\n")
	print("")
	selection=int(input("Please select one: "))
	if selection==1:
		notebook = open(nowopen)
		notes = notebook.read()
		print(notes)
		notebook.close()
	elif selection==2:
		notebook = open(nowopen, "a")
		newnote = input("Write a new note: ")
		now = time.strftime("%X%x")
		notebook.write(newnote + ":::" + now)
		notebook.close()
	elif selection==3:
		notebook = open(nowopen, "w")
		notebook.close()
		print("Notes deleted.")
	elif selection == 4:
		nowopen = input("Give the name of the new file: ")
		try:
			notebook = open(nowopen)
			notebook.close()
		except IOError:
			notebook = open(nowopen, "w")
			print("No notebook with that name detected, created one.")
			notebook.close()
	elif selection == 5:
		print("Notebook shutting down, thank you.")
		break
	else:
		print("Incorrect selection")
