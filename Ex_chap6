The first assignment in this chapter is easy: create a program with a main function and a separate subfunction called hello, which when called prints "Hello there!". The subfunction does not take any parameters or return any value, just prints the line. Then, to the main function, add a call to the subfunction and two print commands, the first one before the call which says "Lets call the subfunction:", and one after the subfunction call, a print command which prints "Quitting.". If implemented correctly, the program will print the following:



>>> 
Lets call the subfunction:
Hello there!
Quitting.
>>> 


Also remember to add this main function call to the main level:



if __name__ == "__main__":
    main()
    
solution:
def hello():
	print("Hello there!")
	
def main():
	print("Lets call the subfunction:")
	hello()
	print("Quitting.")
	'break'
	
if __name__ == "__main__":
	main()
  
  
In the second exercise the idea is to try out parameters between functions. Create a program which has the main function and a subfunction "poweroftwo". The main function prompts the user for a number "Give a number: " and then this number is sent to the subfunction as a parameter. The subfunction calculates the n:th power of 2 of the number (if given 3, 2*2*2; if 5, 2*2*2*2*2 and so on, 2**[number]) and prints it out with the message "The result was [result]". When working correctly, the program prints:



>>> 
Give a number: 5
The result is 32
>>> 



Or possibly




>>> 
Give a number: 8
The result is 256
>>> 




Also remember to add this main function call to the main level:



if __name__ == "__main__":
    main()
    
solution:
def poweroftwo(number):
	result=int(2**(number))
	return result
	
def main():
	number = int(input("Give a number: "))
	poweroftwo(number)
	print("The result is ", poweroftwo(number))

if __name__ == "__main__":
    main()
    
    
The third exercise tests out the default values of parameters. Create a program which has a main function and a subfunction called tester. The main function prompts user for an input "Write something (quit ends): " and sends this input to the subfunction as a parameter.

Define the subfunction tester so that it has one parameter called "givenstring", which has the default value "Too short". If the user input is less than 10 characters, the program uses the default value and if 10 or more, it prints the usergiven input. If the user inputs "quit", the program is terminated. When working correctly, the program will print out something like this:



>>> 
Write something (quit ends): what?
Too short
Write something (quit ends): What do you mean?
What do you mean?
Write something (quit ends): Ok thats it
Ok thats it
Write something (quit ends): I am out of here
I am out of here
Write something (quit ends): quit
>>> 




The easiest way of testing the length of a string is by using the function len().

solution:
def tester(givenstring = "Too short"):
	print(givenstring)

def main():
	while True:
		givenstring=input("Write something (quit ends): ")
		result = len(givenstring)
		if givenstring=="quit":
			break
		elif result<10:
			tester()
		else:
			tester(givenstring)
			
if __name__ == "__main__":
	main()
  
  
The last exercise in this chapter extends the previous exercise, but it is also possible to make it completely independently. Modify the function tester so that, besides testing if the length of the given string is more than ten characters, it also tests if there is the character "X" (capital X) in the given string. If the string is longer than 10 characters and it has X in it, the tester subfunction returns a value True to the main function, otherwise False.

If the subfunction returns True to the main function, the program prints "X spotted!". As earlier, if the user inputs "quit", the program terminates. When working correctly, the program prints something like this:



>>> 
Write something (quit ends): Hello
Too short
Write something (quit ends): Ok a bit longer then?
Ok a bit longer then?
Write something (quit ends): Is Xavier here?
Is Xavier here?
X spotted!
Write something (quit ends): OMG
Too short
Write something (quit ends): quit
>>> 

solution:
def tester(givenstring = "Too short"):
	print(givenstring)
	result = len(givenstring)
	if ('X' in givenstring) and (result>=10):
		print("X spotted!")

def main():
	while True:
		givenstring=input("Write something (quit ends): ")
		result = len(givenstring)
		if givenstring=="quit":
			break
		elif result<10:
			tester()
		else:
			tester(givenstring)
			
if __name__ == "__main__":
	main()
